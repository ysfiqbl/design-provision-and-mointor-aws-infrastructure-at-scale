Group hierarchy,Region,Description,Service,Upfront,Monthly,First 12 months total,Currency,Configuration summary
My Estimate,US East (N. Virginia),,Amazon EC2,0,1411.345563,16936.15,USD,"Operating system (Linux), Storage for each EC2 instance (General Purpose SSD (gp2)), Storage amount (100 GB), Snapshot Frequency (2x Daily), Amount changed per snapshot (3 GB), DT Inbound: Not selected (0 TB per month) 
, DT Outbound: Not selected (0 TB per month) 
, DT Intra-Region: (0 TB per month) 
, Workload (Daily, (Workload days: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Baseline: 1, Peak: 12, Duration of peak: 8 Hr 30 Min)), Advance EC2 instance (c4.2xlarge), Pricing strategy (undefined 1 Year  None upfront)"
My Estimate,US East (N. Virginia),,Amazon EC2,0,245.10168199999998,2941.22,USD,"Operating system (Linux), Storage for each EC2 instance (Provisioned IOPS SSD (io1)), Storage amount (100 GB), Snapshot Frequency (2x Daily), Amount changed per snapshot (3 GB), DT Inbound: Not selected (0 TB per month) 
, DT Outbound: Not selected (0 TB per month) 
, DT Intra-Region: (0 TB per month) 
, Workload (Daily, (Workload days: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Baseline: 1, Peak: 12, Duration of peak: 8 Hr 30 Min)), Advance EC2 instance (t3.medium), Pricing strategy (undefined 1 Year  None upfront)"
My Estimate,US East (N. Virginia),,Amazon RDS for MySQL,0,8187.512,98250.14,USD,"Quantity (2), Pricing strategy (Standard Reserved Instances 1 Year No Upfront), Storage for each RDS instance (Provisioned IOPS SSD (io1)), Storage amount (1024 GB), Instance type (db.m5.12xlarge)"
My Estimate,US East (N. Virginia),,S3 Standard,0,1537.88,18454.56,USD,S3 Standard storage (60 TB per month)
My Estimate,US East (N. Virginia),,S3 Standard - Infrequent Access,0,753.9,9046.80,USD,S3 Infrequent Access storage (50 TB per month)
My Estimate,US East (N. Virginia),,S3 Glacier,0,212.4,2548.80,USD,S3 Glacier storage (50 TB per month)
My Estimate,US East (N. Virginia),,Data Transfer,0,0,0.00,USD,"DT Inbound: Internet (0 TB per month) 
, DT Outbound: Amazon Cloud Front (0 GB per month) 
"
My Estimate,US East (N. Virginia),,Amazon Virtual Private Cloud (VPC),0,493.65,5923.80,USD,Number of NAT Gateways (1)
My Estimate,US East (N. Virginia),,Elastic Load Balancing,0,630.8299999999999,7569.96,USD,Number of Application Load Balancers (1)
My Estimate,US East (N. Virginia),,Elastic Load Balancing,0,630.8399999999999,7570.08,USD,"Number of Network Load Balancers (1), Processed bytes per NLB for TCP (5 GB per month), Processed bytes per NLB for TLS (100 TB per month)"
My Estimate,US East (N. Virginia),,Elastic Load Balancing,0,630.8299999999999,7569.96,USD,Number of Application Load Balancers (1)
My Estimate,US East (Ohio),,Amazon RDS for MySQL,0,4093.756,49125.07,USD,"Quantity (1), Pricing strategy (Standard Reserved Instances 1 Year No Upfront), Storage for each RDS instance (Provisioned IOPS SSD (io1)), Storage amount (1024 GB), Instance type (db.m5.12xlarge)"
My Estimate,US East (N. Virginia),,AWS Data Transfer,0,10.24,122.88,USD,"DT Inbound: Not selected (0 TB per month) 
, DT Outbound: US East (Ohio) (1024 GB per month) 
, DT Intra-Region: (0 GB per month) 
, Data transfer cost (10.24)"



"AWS Pricing Calculator provides only an estimate of your AWS fees and doesn't include any taxes that might apply. Your actual fees depend on a variety of factors, including your actual usage of AWS services."


Write Up
--------
It is assumed that the user traffic remains constant similar to the rationale explained in the "Reduced Cost Estimate" section. Therefore the increased in budget was used for improving performance and redudancy. The maximum number of EC2 instances for autoscaling was increased 12 for both web and application instances to improve web and application server performance. A second db.m5.12xlarge instance was added to the database setup to improve database performance and redundancy. A disaster recovery option was also included by maintaining a db.m5.12xlarge RDS instance with a Multi-AZ read replica. Automated jobs can be setup to copy the RDS snapshots between regions and so that the standby region will always have an available database that can be used in case the primary region goes down. The rest of the infrastructure can be created using Terraform scripts and the application deployed using a CI/CD. Since a database with data is already available on the DR site, the time taken to switch over to the DR deployment will be relatively quick. 
